# Goal: do the day-to-day deployment of the site. This is done as the
# 'buildout' user, not as root. At least, we're going to try to do it like
# this. You need to have an ssh key configured to log in with: this is handled
# in the provision.yml playbook.

---
- name: deploy new version of the project to the server
  hosts: all
  remote_user: "{{ build_user }}"
  environment:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"

  tasks:

    - name: Checkout correct version from github.
      git:
        repo: "git@github.com:nens/{{ project_slug }}.git"
        dest: "{{ project_path }}"
        version: "{{ checkout_name }}"

    - name: Create var dirs if not available.
      file:
        path: "{{ project_path }}/{{ item }}"
        mode: 0775
        state: directory
      loop: "{{ project_dirs }}"

    - name: Create the pipenv if not available
      shell: pipenv --three
      environment:
        PIPENV_VENV_IN_PROJECT: 1
      args:
        chdir: "{{ project_path}}"
        creates: "{{ project_path }}/.venv"

    - name: "Deploy (look at var/log/pipenv.log if something goes fishy)"
      shell: pipenv install --deploy --verbose > var/log/pipenv.log 2>&1
      args:
        chdir: "{{ project_path }}"

    - name: Clean unused packages.
      shell: pipenv clean
      args:
        chdir: "{{ project_path }}"

    - name: Recreate config files from templates.
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: 0755
      loop:
      - { src: "templates/env.j2", dest: "{{ project_path }}/.env" }
      - { src: "templates/supervisord.conf.j2", dest: "{{ project_path }}/etc/{{ site_name }}.supervisord.conf" }

    - name: Run migrations.
      shell: pipenv run python manage.py migrate --noinput
      args:
        chdir: "{{ project_path }}"
      run_once: true

    - name: Collect static files.
      shell: pipenv run python manage.py collectstatic --noinput --clear
      args:
        chdir: "{{ project_path }}"

    - name: Add cronjob that starts supervisord at reboot.
      cron:
        name: "Restart supervisor for {{ site_name }}"
        user: "{{ build_user }}"
        special_time: reboot
        job: "supervisord -c {{ project_path }}/etc/{{ site_name }}.supervisord.conf"

    - name: Shut down supervisor.
      action: "shell supervisorctl -c etc/{{ site_name }}.supervisord.conf shutdown"
      args:
        chdir: "{{ project_path }}"
      ignore_errors: yes

    - name: Wait for supervisor to actually stop.
      wait_for:
        path: "{{ project_path }}/var/supervisord.pid"
        state: absent

    - name: Start site with supervisor.
      action: "shell supervisord -c etc/{{ site_name }}.supervisord.conf"
      args:
        chdir: "{{ project_path }}"

    - name: Recreate nginx config from template.
      template:
        src: "templates/nginx.conf.j2"
        dest: "{{ project_path }}/etc/{{ site_name }}.nginx.conf"
        mode: 0755
      register: nginxconf

    - name: Validate the nginx config.
      shell: sh -c "sudo nginx -t"
      when: nginxconf.changed

    - name: Reload the nginx config.
      shell: sh -c "sudo service nginx reload"
      when: nginxconf.changed
